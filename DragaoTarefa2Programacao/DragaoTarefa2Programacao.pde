int[] cores = {#F5ABE9, #93F5F0, #6DA8A5, #F5ECC4, #A84598};
void setup() {
  background(180, 255, 180);
  size(600, 600);
  gradiente();
  stroke(#F5ABE9);
  cauda();
  asas();
  pernas();
  corpoEcabeca();
}
void gradiente() {
  for (float i=0; i < 600; i=i+0.05) {
    stroke(i, 150, 200);
    line(0, i, 600, i);
  }
  for (float i=400; i<600; i+=1) {
    stroke(70, 0, i);
    line(0, i, 600, i);
  }
  fill(255, 180, 0);
  noStroke();
  arc(300, 400, 300, 300, radians(180), radians(360));
  fill(255, 255, 0,30);
  arc(300, 405, 300, 150, radians(0), radians(180));
  ellipse(300,550,540,90);
  for(int i=400; i<600; i+=2){
    stroke(#2B16B7);
    line(0,i,600,i);
  }
  for (int i=320; i<500; i+=5) {
    noStroke();
    fill(255, 0, 150, 10);
    rect(0, i, 600, 70);
  }
}
void cauda() {
  fill(cores[int(random(0, cores.length))]);
  triangle(40, 270, 40, 290, 80, 320); 
  fill(cores[int(random(0, cores.length))]);
  triangle(40, 290, 10, 270, 20, 300);
  fill(cores[int(random(0, cores.length))]);
  triangle(20, 300, 0, 320, 25, 325);
  fill(cores[int(random(0, cores.length))]);
  triangle(25, 325, 0, 350, 40, 340);
  fill(cores[int(random(0, cores.length))]);
  triangle(40, 340, 30, 370, 70, 340); 
  fill(cores[int(random(0, cores.length))]);
  triangle(40, 290, 20, 300, 80, 320);
  fill(cores[int(random(0, cores.length))]);
  triangle(20, 300, 80, 320, 25, 325);
  fill(cores[int(random(0, cores.length))]);
  triangle(25, 325, 80, 320, 40, 340);
  fill(cores[int(random(0, cores.length))]);
  triangle(40, 340, 70, 340, 80, 320);
  fill(cores[int(random(0, cores.length))]);
  triangle(80, 320, 70, 340, 125, 330);
  fill(cores[int(random(0, cores.length))]);
  triangle(70, 340, 110, 330, 120, 355);
  fill(cores[int(random(0, cores.length))]);
  triangle(110, 330, 120, 355, 125, 330);
  fill(cores[int(random(0, cores.length))]);
  triangle(120, 355, 125, 330, 135, 345);
  fill(cores[int(random(0, cores.length))]);
  triangle(120, 355, 135, 345, 150, 365);
  fill(cores[int(random(0, cores.length))]);
  triangle(125, 330, 150, 365, 180, 345);
  fill(cores[int(random(0, cores.length))]);
  triangle(150, 365, 180, 345, 200, 380);
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 380, 180, 345, 200, 345);
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 345, 230, 325, 200, 365);
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 365, 200, 380, 220, 375);
  fill(cores[int(random(0, cores.length))]);
  triangle(270, 330, 230, 325, 200, 365); 
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 365, 270, 330, 220, 375);
  fill(cores[int(random(0, cores.length))]);
  triangle(270, 330, 220, 375, 305, 365); 
  fill(cores[int(random(0, cores.length))]);
  triangle(230, 325, 270, 330, 290, 290);
  fill(cores[int(random(0, cores.length))]);
  triangle(270, 330, 310, 340, 305, 365);
  fill(cores[int(random(0, cores.length))]);
  triangle(270, 330, 290, 290, 310, 340);
  fill(cores[int(random(0, cores.length))]);
  triangle(305, 365, 310, 340, 330, 370); 
  fill(cores[int(random(0, cores.length))]);
  triangle(330, 370, 345, 350, 370, 370);
}

void asas() {
  fill(cores[int(random(0, cores.length))]);
  triangle(10, 125, 110, 70, 80, 120);
  fill(cores[int(random(0, cores.length))]);
  triangle(10, 125, 80, 120, 110, 170);
  fill(cores[int(random(0, cores.length))]);
  triangle(80, 120, 110, 70, 170, 130);
  fill(cores[int(random(0, cores.length))]);
  triangle(80, 120, 110, 170, 170, 130);
  fill(cores[int(random(0, cores.length))]);
  triangle(130, 180, 110, 170, 170, 130);
  fill(cores[int(random(0, cores.length))]);
  triangle(110, 70, 190, 80, 170, 130);
  fill(cores[int(random(0, cores.length))]);
  triangle(190, 80, 200, 130, 170, 130);
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 130, 170, 130, 200, 180);
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 180, 170, 130, 130, 180);
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 180, 200, 130, 250, 184);
  fill(cores[int(random(0, cores.length))]);
  triangle(115, 240, 140, 210, 150, 215);
  fill(cores[int(random(0, cores.length))]);
  triangle(160, 230, 150, 215, 115, 240);
  fill(cores[int(random(0, cores.length))]);
  quad(130, 180, 140, 210, 150, 215, 200, 180);
  fill(cores[int(random(0, cores.length))]);
  triangle(150, 215, 160, 230, 200, 180);
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 180, 160, 230, 200, 250);
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 180, 200, 250, 230, 250);
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 250, 230, 250, 210, 270);
  fill(cores[int(random(0, cores.length))]);
  triangle(250, 220, 230, 250, 200, 180);
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 180, 250, 220, 330, 190);
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 130, 190, 80, 255, 105);
  fill(cores[int(random(0, cores.length))]);
  triangle(255, 105, 200, 130, 250, 140);
  fill(cores[int(random(0, cores.length))]);
  triangle(200, 130, 250, 140, 250, 184);
  fill(cores[int(random(0, cores.length))]);
  triangle(250, 140, 250, 184, 330, 190);
  fill(cores[int(random(0, cores.length))]);
  triangle(255, 105, 250, 140, 330, 190);
  fill(cores[int(random(0, cores.length))]);
  triangle(250, 220, 330, 190, 260, 270);
  fill(cores[int(random(0, cores.length))]);
  triangle(250, 220, 220, 260, 260, 270);
  fill(cores[int(random(0, cores.length))]);
  triangle(330, 190, 300, 260, 260, 270);
  fill(cores[int(random(0, cores.length))]);
  triangle(300, 260, 260, 270, 290, 290);
  fill(cores[int(random(0, cores.length))]);
  triangle(300, 260, 290, 290, 330, 275);
  fill(cores[int(random(0, cores.length))]);
  triangle(300, 260, 330, 190, 330, 275);
  fill(cores[int(random(0, cores.length))]);
  //MAO
  quad(400, 145, 380, 190, 330, 190, 320, 180);
  fill(cores[int(random(0, cores.length))]);
  triangle(277, 130, 320, 180, 400, 145);
  fill(cores[int(random(0, cores.length))]);
  triangle(330, 190, 365, 160, 380, 170);
  fill(cores[int(random(0, cores.length))]);
  triangle(330, 190, 380, 190, 395, 210);
  fill(cores[int(random(0, cores.length))]);
  triangle(370, 203, 355, 215, 330, 190);
  fill(cores[int(random(0, cores.length))]);
  triangle(355, 215, 330, 275, 330, 190);
  fill(cores[int(random(0, cores.length))]);
  triangle(330, 275, 290, 290, 310, 340);
  fill(cores[int(random(0, cores.length))]);
  triangle(330, 275, 355, 215, 405, 250);
  //< mÃ£o/>
  fill(cores[int(random(0, cores.length))]);
  quad(405, 250, 395, 210, 370, 203, 355, 215);
  fill(cores[int(random(0, cores.length))]);
  triangle(400, 145, 380, 190, 450, 150);
  fill(cores[int(random(0, cores.length))]);
  triangle(380, 190, 395, 210, 450, 150);
  fill(cores[int(random(0, cores.length))]);
  triangle(395, 210, 450, 150, 405, 250);
  fill(cores[int(random(0, cores.length))]);
  triangle(450, 150, 405, 250, 440, 230);
  fill(cores[int(random(0, cores.length))]);
  triangle(440, 230, 450, 150, 470, 195);
  fill(cores[int(random(0, cores.length))]);
  triangle(485, 175, 470, 195, 450, 150);
  fill(cores[int(random(0, cores.length))]);
  triangle(485, 175, 470, 195, 510, 170);
  fill(cores[int(random(0, cores.length))]);
  triangle(470, 195, 520, 180, 490, 200);
  fill(cores[int(random(0, cores.length))]);
  triangle(490, 200, 500, 220, 470, 195);
  fill(cores[int(random(0, cores.length))]);
  quad(470, 195, 480, 205, 470, 240, 440, 230);
  fill(cores[int(random(0, cores.length))]);
  triangle(440, 230, 470, 240, 465, 290);
  fill(cores[int(random(0, cores.length))]);
  triangle(465, 290, 440, 230, 405, 250);
  fill(cores[int(random(0, cores.length))]);
  triangle(440, 290, 465, 290, 405, 250);
}

void pernas() {
  fill(cores[int(random(0, cores.length))]);
  triangle(330, 370, 325, 415, 315, 390);
  fill(cores[int(random(0, cores.length))]);
  triangle(370, 370, 330, 370, 325, 415);
  fill(cores[int(random(0, cores.length))]);
  triangle(370, 370, 395, 365, 350, 390);
  fill(cores[int(random(0, cores.length))]);
  quad(375, 405, 350, 390, 355, 430, 375, 420);
  fill(cores[int(random(0, cores.length))]);
  triangle(395, 365, 350, 390, 375, 405);
  fill(cores[int(random(0, cores.length))]);
  triangle(355, 430, 375, 420, 360, 440);
  fill(cores[int(random(0, cores.length))]);
  triangle(375, 420, 360, 440, 370, 445);
  fill(cores[int(random(0, cores.length))]);
  triangle(370, 445, 375, 420, 380, 445);
  fill(cores[int(random(0, cores.length))]);
  triangle(355, 430, 360, 440, 350, 465);
  fill(cores[int(random(0, cores.length))]);
  triangle(360, 440, 370, 445, 355, 470);
  fill(cores[int(random(0, cores.length))]);
  triangle(370, 445, 380, 445, 370, 470);
  fill(cores[int(random(0, cores.length))]);
  //esquerda
  triangle(315, 450, 325, 415, 310, 380);
  fill(cores[int(random(0, cores.length))]);
  quad(310, 400, 315, 450, 315, 470, 310, 440);
  fill(cores[int(random(0, cores.length))]);
  triangle(310, 440, 310, 400, 285, 450);
  fill(cores[int(random(0, cores.length))]);
  triangle(310, 440, 285, 450, 295, 460);
  fill(cores[int(random(0, cores.length))]);
  triangle(310, 440, 295, 460, 305, 460);
  fill(cores[int(random(0, cores.length))]);
  triangle(310, 440, 305, 460, 315, 470);
  fill(cores[int(random(0, cores.length))]);
  triangle(285, 450, 295, 460, 275, 485);
  fill(cores[int(random(0, cores.length))]);
  triangle(295, 460, 305, 460, 290, 490);
  fill(cores[int(random(0, cores.length))]);
  triangle(305, 460, 315, 470, 300, 490);
}
void corpoEcabeca() {
  fill(cores[int(random(0, cores.length))]);
  triangle(330, 275, 370, 260, 340, 310);
  fill(cores[int(random(0, cores.length))]);
  triangle(340, 310, 330, 275, 310, 340);
  fill(cores[int(random(0, cores.length))]);
  triangle(340, 310, 370, 260, 360, 330);
  fill(cores[int(random(0, cores.length))]);
  triangle(340, 310, 330, 370, 310, 340);
  fill(cores[int(random(0, cores.length))]);
  triangle(340, 310, 330, 370, 360, 330);
  fill(cores[int(random(0, cores.length))]);
  triangle(370, 260, 360, 330, 380, 310);
  fill(cores[int(random(0, cores.length))]);
  triangle(370, 260, 380, 310, 440, 290);
  fill(cores[int(random(0, cores.length))]);
  triangle(370, 260, 440, 290, 405, 250);
  fill(cores[int(random(0, cores.length))]);
  quad(360, 330, 345, 350, 370, 370, 395, 365);
  fill(cores[int(random(0, cores.length))]);
  triangle(395, 365, 360, 330, 380, 310);
  fill(cores[int(random(0, cores.length))]);
  triangle(395, 365, 380, 310, 410, 300);
  fill(cores[int(random(0, cores.length))]);
  triangle(395, 365, 410, 300, 440, 290);
  fill(cores[int(random(0, cores.length))]);
  triangle(395, 365, 440, 290, 500, 310);
  fill(cores[int(random(0, cores.length))]);
  triangle(440, 290, 500, 310, 465, 290);
  fill(cores[int(random(0, cores.length))]);
  //parte 2
  triangle(395, 365, 500, 310, 455, 355);
  fill(cores[int(random(0, cores.length))]);
  triangle(455, 355, 500, 310, 495, 345);
  fill(cores[int(random(0, cores.length))]);
  triangle(500, 310, 495, 345, 520, 330);
  fill(cores[int(random(0, cores.length))]);
  triangle(500, 310, 520, 330, 540, 310);
  fill(cores[int(random(0, cores.length))]);
  quad(520, 330, 540, 310, 550, 335, 540, 340);
  fill(cores[int(random(0, cores.length))]);
  triangle(540, 310, 505, 285, 560, 295);
  fill(cores[int(random(0, cores.length))]);
  triangle(560, 295, 540, 310, 575, 325);
  fill(cores[int(random(0, cores.length))]);
  triangle(575, 325, 540, 310, 550, 335);
  fill(cores[int(random(0, cores.length))]);
  quad(550, 335, 575, 325, 595, 340, 570, 350);
  fill(cores[int(random(0, cores.length))]);
  triangle(595, 340, 575, 325, 575, 305);
  fill(cores[int(random(0, cores.length))]);
  triangle(595, 340, 570, 350, 590, 355);
  fill(cores[int(random(0, cores.length))]);
  quad(570, 350, 580, 370, 570, 380, 555, 365);
  fill(cores[int(random(0, cores.length))]);
  quad(570, 350, 555, 365, 540, 340, 550, 335);
  fill(cores[int(random(0, cores.length))]);
  triangle(525, 365, 540, 340, 555, 365);
  fill(cores[int(random(0, cores.length))]);
  quad(525, 365, 540, 340, 520, 330, 495, 345);
  fill(cores[int(random(0, cores.length))]);
  triangle(525, 365, 495, 345, 455, 355);
}
